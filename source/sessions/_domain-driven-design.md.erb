The greenfield project started out so promising. Instead of devolving into big ball 
of mud, the team decided to apply domain-driven design principles. Ubiquitous 
language, proper boundaries, encapsulation, it all made sense.

But along the way, something went completely and utterly wrong. It started with 
arguments on the proper way of implementing aggregates and entities. Arguments began 
over project and folder structure. Someone read a blog post that repositories are 
evil, and ORMs the devil incarnate. Another read that relational databases are last 
century, we need to store everything as a stream of events. Then came the actor model 
and frameworks that sounded like someone clearing their throat. Instead of a nice, 
clean architecture, the team chased the next new approach without ever actually 
shipping anything.

Beyond the endless technical arguments it causes, domain-driven design can actually 
produce great software. We have to look past the hype into the true value of DDD, 
what it can bring to our organizations and how it can enable us to build quality 
systems. With the advent of microservices, DDD is more important than ever - but 
only if we can get to the good parts.
